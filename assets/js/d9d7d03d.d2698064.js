"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4557],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),l=c(n),f=o,k=l["".concat(u,".").concat(f)]||l[f]||s[f]||a;return n?r.createElement(k,i(i({ref:t},p),{},{components:n})):r.createElement(k,i({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=l;var d={};for(var u in t)hasOwnProperty.call(t,u)&&(d[u]=t[u]);d.originalType=e,d.mdxType="string"==typeof e?e:o,i[1]=d;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},6793:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return d},metadata:function(){return c},toc:function(){return s}});var r=n(3117),o=n(102),a=(n(7294),n(3905)),i=["components"],d={title:"Bitwarden"},u="Bitwarden - Vaultwarden",c={unversionedId:"dokku/bitwarden",id:"dokku/bitwarden",title:"Bitwarden",description:"Vaultwarden: An alternative implementation of the Bitwarden server API written in Rust and compatible with upstream Bitwarden clients, perfect for self-hosted deployment where running the official resource-heavy service might not be ideal.",source:"@site/docs/dokku/bitwarden.md",sourceDirName:"dokku",slug:"/dokku/bitwarden",permalink:"/synopsis/dokku/bitwarden",draft:!1,editUrl:"https://github.com/lebalz/blog/edit/main/docs/dokku/bitwarden.md",tags:[],version:"current",frontMatter:{title:"Bitwarden"},sidebar:"tutorialSidebar",previous:{title:"Dokku",permalink:"/synopsis/dokku/"},next:{title:"Drone CI",permalink:"/synopsis/dokku/drone-ci/"}},p={},s=[],l={toc:s};function f(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"bitwarden---vaultwarden"},"Bitwarden - Vaultwarden"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/dani-garcia/vaultwarden#installation"},"Vaultwarden"),": An alternative implementation of the Bitwarden server API written in ",(0,a.kt)("strong",{parentName:"p"},"Rust")," and ",(0,a.kt)("strong",{parentName:"p"},"compatible with upstream Bitwarden clients"),", perfect for self-hosted deployment where running the official resource-heavy service might not be ideal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\nAPP=bitwarden\nMAIL=foor@bar.ch\nDOMAIN=bitwarden.dokku.me\n\n# create app\ndokku apps:create $APP\n\n# setup and mount persitent storage\nmkdir -p /var/lib/dokku/data/storage/$APP/data\ndokku storage:mount $APP /var/lib/dokku/data/storage/$APP/data:/data/\n\n# add port mapping\ndokku proxy:ports-add $APP "http:80:80"\n# set domain\ndokku domains:add $APP $DOMAIN\n\n# SMTP configuration\ndokku config:set $APP DOMAIN=https://$DOMAIN\ndokku config:set $APP SMTP_HOST=mail.gandi.net\ndokku config:set $APP SMTP_FROM=foo@bar.ch\ndokku config:set $APP SMTP_FROM_NAME=Bitwarden\ndokku config:set $APP SMTP_PORT=587 \ndokku config:set $APP SMTP_SSL=true\ndokku config:set $APP SMTP_USERNAME=foo@bar.ch\ndokku config:set $APP SMTP_PASSWORD=safe-pw\n\n# letsencrypt config\ndokku config:set --no-restart $APP DOKKU_LETSENCRYPT_EMAIL=$MAIL\n\n# enable admin route\ndokku config:set $APP ADMIN_TOKEN=$(openssl rand -base64 48)\n\n# for correct propagation of the clients ip:\ndokku nginx:set $APP x-forwarded-for-value "\\$proxy_add_x_forwarded_for"\n\n# deploy\ndokku git:from-image $APP vaultwarden/server:latest\n\n#letsencrypt\ndokku letsencrypt $APP\n')),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"The following step ",(0,a.kt)("strong",{parentName:"p"},"has to be done after each deployment"),", since there is no possibility to set X-Real-IP to ",(0,a.kt)("inlineCode",{parentName:"p"},"$remote_addr")," without a custom template, so edit the nginx template under ",(0,a.kt)("inlineCode",{parentName:"p"},"/home/dokku/$APP/nginx.conf")," and add"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=/home/dokku/$APP/nginx.conf",title:"/home/dokku/$APP/nginx.conf"},"location / {\n    ...\n    X-Real-IP to $remote_addr;\n}\n")),(0,a.kt)("p",{parentName:"admonition"},"and then do a ",(0,a.kt)("inlineCode",{parentName:"p"},"service nginx reload"),".")))}f.isMDXComponent=!0}}]);